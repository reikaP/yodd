{"pages":[{"title":"Public Key","text":"123456789101112131415161718192021222324252627282930-----BEGIN PGP PUBLIC KEY BLOCK-----Version: GnuPG v2mQENBFraG7wBCADLOXJ07CY9orF4IwBu/DBlxs4wgcEqpN4SuKsDuUys5UVMYbi7gXjGfEGnWpEFo1+x6RBRKj6VBik9Q2u4wtAO4LaV4JROOWNtcpEyMr6hc1eXzfemOVen2AxJmmRrvEjdX4YmWE3zTY2OwvcXLkB3EyuEzGR+ILnYnfR8cv+6VwP5Zvtjit28iv9AZSRQE347jwdxmuqqIA6m1abdDj+dAS31yy2kjyWYam84Jgw6bWXkmuNAmTv7Mc2FxSeRERpNHzjlbV/CFb5G6CdgVfhtmG3WNPcE8g3vmnXzTmIUJKZMGNTJNxxBOexl8wTgoUCu/flG0RqRn2XAuDCdWSNnABEBAAG0JUF4bCBZb3NodWEgWW9keSA8YXhseW9keTk2QGdtYWlsLmNvbT6JATcEEwEIACEFAlraG7wCGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AACgkQ2no+zfY6UHozYgf9G1Ay7Wh77XZ9srqMZE0jn/9oJazwd+RdM7XqjKIcG7prffoRWGWlPMcRv9sXyCktoq8VBp8ttnl9ayR/KNAbIZQ8FeMx11YLxibpWLP/ONv+C2el1JcZhYTqDkzylvEJRjHWo8TrS+FdlF9TIzLtz9VMbp3lzsO2AKVPPN76sl1gJrHfPE/tydWl8B+YP6BWp+kAZKap81P5ZIyH3ebqnW4+VbKAC6Vtfg08B0KthqNK38I+k/Njby/4gUCk3XJdwcBWZIPO7dp0c00XHqnrX3PcmnYkPj2K51u4/w4o5wNk+5bIGtRS9ppBLSxdgCcZDivASuuFG5JHWzOKUJkz1LkBDQRa2hu8AQgAvsLKiAzPSkRBqjnaiZMe3PCjI+i4v6LeTafxTQrsmnzXT2WwrOQ7+Upf7ndxScBueIkljdMtd2eiF0LyaIyagWgLPGO+H8ginlBceJjV6fPWi7Aw2zU8d7YcAMRhd1qEtB9qkzcfxeQL5Ck4wbAWaeQJIH2tn/kLLT98yx3dS1j/8gC8rON/MRwfYVzzsIzLdUmd4sNTuZwUCa/0JTL7AbWzP+tsvShNgGi4YlPnsOogLvg2GVragje27fe4ii20qsRFOhdN8ZjLRCinAVdfgClLIBiGlRhsoAqQNlGcJw0FX8FJvkVMqj7ixKeDqVWSpyBIBETTTDP7TR9armvCFQARAQABiQEfBBgBCAAJBQJa2hu8AhsMAAoJENp6Ps32OlB6JegH/RGCd6pV+qIjpGkSVrEjrXbvkkSTIo4XRlTQK7ydAIhLt7vramUv1BusTgXiLox5jhZCxXxM+zsKaC924OdChRwLJzTgdUoWPNUB+BgXA+YNSZ2tny36Gano+XekXAcVvGZ5VT5sZXauamZclIiYDEjwlJSuClmCxAEi1rGOuyODcslQYtkJKhYXeXgT9f3oGFZ5pjIgxD9bRkQiDQAbFCoVyBvBupgQjP1P2yhX5pklFzviR4JTWR+28s4HimDWVu2Upkk6KGhNGAdlEbAZA3jMJ/PG0AWb4SvSTDrVJhdewVFq6rKeZN1/k1qzVK9xIsEzcehXUcNLJEmGjNX1qm4==4rFW-----END PGP PUBLIC KEY BLOCK-----","link":"/Public-Key/index.html"}],"posts":[{"title":"Hello World","text":"Just hello world post :)","link":"/Hello-World.html"},{"title":"Integrasi VueJS dengan Algolia","text":"Mungkin ini bisa dibilang post pertama heheKali ini sesuai judul mau ngebahas cara mengintegrasikan VueJS dengan Algolia.Pertama apa itu Algolia? Algolia itu seperti hosted search engine API. Sesuai pengertiannya resource atau database kita akan disimpan ke server Algolia yang akan dijadikan API untuk keperluan searching.Hampir mirip-mirip lah dengan ElasticSearch. Nah keunggulan Algolia ini respon lebih cepat ketika melakukan query karena sesuai apa yang mereka bilang. https://www.algolia.com/infra Our search API powers billions of queries for thousands of companies every month, delivering relevant results in under 100ms anywhere in the world. Juga memiliki DSN (Distributed Search Network) sebagai infrastrukturnya. Jadi setiap melakukan pencarian kamu akan diarahkan server terdekat mereka.Sebagai contoh kamu berada di Jakarta mau mencari data, maka akan diarahkan ke server Singapore dan latency tentunya akan lebih kecil. Sama seperti sistemnya CDN yang biasa digunakan untuk distribusi konten. Contoh implementasi Langsung ke tutorialnya Membuat AkunSebelum menggunakan Algolia kamu dihadapkan untuk mendaftar terlebih dahulu. Kali ini saya menggunakan akun Free (Community), dan harus mencantumkan banner “Search by Algolia”. Tinggal ikuti saja tutorial”nya.Setelah itu akan dihadapkan ke dasbor Algolia. Membuat Index Pertama KaliIndex yaitu entitas pada Algolia yang akan memungkinkan kamu menentukan atribut yang akan dicari, rank atau urutan, dan masih banyak lagi tentunya. Pada halaman awal Indinces kamu harus membuat indeks terlebih dahulu.Sebagai contoh saya buat index “karyawan” Setelah itu akan diarahkan ke halaman index yang dibuat. Lalu buat record.Sebagai contoh menggunakan dummy data ini. 1234567891011121314151617181920212223242526272829303132[ &#123; \"_id\": \"5ad976f228c7fa1ba5df2bf9\", \"name\": \"Campbell Washington\", \"gender\": \"male\" &#125;, &#123; \"_id\": \"5ad976f25ed94410475c3e2a\", \"name\": \"Fran Smith\", \"gender\": \"female\" &#125;, &#123; \"_id\": \"5ad976f29e0623981752a211\", \"name\": \"Sophia Montgomery\", \"gender\": \"female\" &#125;, &#123; \"_id\": \"5ad976f23c61f0b4ec1bf226\", \"name\": \"Golden Atkins\", \"gender\": \"male\" &#125;, &#123; \"_id\": \"5ad976f2045ed6ce32d682d2\", \"name\": \"Alberta Mccullough\", \"gender\": \"female\" &#125;, &#123; \"_id\": \"5ad976f291d71041b56fa175\", \"name\": \"Hinton Harrell\", \"gender\": \"male\" &#125;] Oke data sudah ditambahkan :) Membuat API untuk integrasiPada halaman “API Keys” kamu harus membuat API Keys baru atau menggunakan API Keys yang sudah ada pada “Your Keys”Kamu bisa kustomisasikan API yang dibuat misal hanya untuk digunakan pada URL mana dan juga hak akses apa untuk API key tersebut. Integrasi dengan VueJSPpastikan module “vue-instantsearch” sudah terpasang.yarn add vue-instantsearch 12import InstantSearch from 'vue-instantsearch';Vue.use(InstantSearch); Cocokkan dengan API yang dibuat sebelumnya123456789101112131415161718&lt;template&gt;&lt;div id=\"app\"&gt; &lt;ais-index app-id=\"\" api-key=\"\" index-name=\"\" &gt; &lt;ais-search-box&gt;&lt;/ais-search-box&gt; &lt;ais-results&gt; &lt;template slot-scope=\"&#123; result &#125;\"&gt; &lt;h2&gt; &lt;ais-highlight :result=\"result\" attribute-name=\"name\"&gt;&lt;/ais-highlight&gt; &lt;/h2&gt; &lt;/template&gt; &lt;/ais-results&gt; &lt;/ais-index&gt;&lt;/div&gt;&lt;/template&gt; Hasilnya Silahkan kreasikan design kamu dan untuk selengkapnya mengenai component pada InstantSearchBisa baca dokumentasi ini. KesimpulanAlgolia ini sangat cocok buat kamu yang pengen buat Search Engine sendiri namun respon yang cepat dan tidak ribet dengan kodinganmu sendiri. Fitur yang ditawarkan pada akun Free itu lebih dari cukup untuk saya. Dengan maximum 30 queries per detik dan bisa diatur batasannya di pengaturan API dan penyimpanan records sekitar 10k dan 100k operations itu cukup untuk penggunaan yang… ya lumayanlah :)Ada juga akun Essentials yang bisa kamu dapatkan gratis kalau project yang kamu buat dan gunakan itu berbasis Open Source. Perlu dikualifikasi dulu deh :D","link":"/Integrasi-VueJS-dengan-Algolia.html"},{"title":"Membuat Laravel Package","text":"Oke.. Laravel… Hmm pasti sudah banyak yang tahu dengan PHP framework yang memang ngehits dan jadi top tier untuk framework PHP terbaik saat ini. Atau kamu sudah membuat aplikasi yang wow dengan framework Laravel..? Tidak lupa dengan packagenya, mungkin kamu juga pasti sering-sering menginstall beberapa package yang ada di Packagist.Lalu..?Yang jadi pertanyaan. Bagaimana caranya mereka membuat package tersebut?Saatnya saya akan menjelaskan caranya :) Pastikan kamu sudah menginstall Laravel sebelumnyaMembuat folder untuk packageSaya akan membuat package tersebut didalam folder packages bukan didalam vendor. Karena untuk folder vendor hanya boleh diatur dengan Composer. Jadi bisa dibilang folder vendor itu tidak boleh diutak-atik. Kalau diganti atau dimodifikasi, setiap kita melakukan composer update. Data yang berada didalam vendor dikembalikan seperti asal mulanya. Struktur nya seperti akan menjadi seperti ini packages/&lt;user&gt;/&lt;repo&gt;/src Folder sudah dibuat.. Lanjut dengan membuat composer.json pada packagenyacomposer init atau kalau kebingungan ngisinya ya pake ini aja :)1234567891011121314151617\"name\": \"yodd/githubprofile\",\"description\": \"Testtt...\",\"type\": \"library\",\"license\": \"MIT\",\"minimum-stability\": \"dev\",\"autoload\": &#123; \"psr-4\": &#123; \"Yodd\\\\VNDBClient\\\\\": \"src/\" &#125;&#125;,\"authors\": [ &#123; \"name\": \"Yodd\", \"email\": \"kao@shikakun.moe\" &#125;] Mengintegrasikan Package yang dibuat ke App LaravelAgar terbaca dengan app Laravel yang dibuat sebelumnya. Kita perlu mengintegrasikan atau menginclude package tersebut. Jadi package tersebut dapat kita panggil langsung dari folder package tersebut. Tambahkan package tadi ke composer.json app kamu (bukan composer yang dipackage) di PSR-412345678910\"autoload\": &#123; \"classmap\": [ \"database/seeds\", \"database/factories\" ], \"psr-4\": &#123; \"App\\\\\": \"app/\", \"Yodd\\\\GitHubProfile\\\\\": \"packages/yodd/githubprofile/src\" &#125; &#125;, Kemudian load package tersebut dengan composercomposer dump-autoload Menambahkan Provider di PackageKembali ke folder package tadi. Pada tahap ini dimana paket tersebut akan dimuat/boot pada app Laravel kita. Arahkan ke root app Laravel, dan buat providernyaphp artisan make:provider GithubProfileServiceProvider Secara otomatis provider yang dibuat tadi akan masuk ke folder app/Providers Pindahkan file tersebut ke folder src pada package yang kita buat Buka file tersebut dan ubah namespacenya user\\package12345678910111213141516171819202122232425&lt;?phpnamespace Yodd\\GitHubProfile;use Illuminate\\Support\\ServiceProvider;class GithubProfileServiceProvider extends ServiceProvider&#123; /** * Bootstrap services. * * @return void */ public function boot() &#123; // &#125; /** * Register services. * * @return void */ public function register() &#123; // &#125;&#125; Membuat ControllerPada tahap ini kita perlu meregister controller agar dapat diload oleh Laravel. Bisa diperhatikan pada public function register()… yup disitu akan kita load Controllernya 1234public function register()&#123; $this-&gt;app-&gt;make('Yodd\\GithubProfile\\Controller');&#123; Selanjutnya kita buat file Controller.phpSebagai contoh saya ingin mengambil data dari Github API 123456789101112131415&lt;?phpnamespace Yodd\\GithubProfile;class GithubProfileController &#123; public static function user($user) &#123; $guzzle = new \\GuzzleHttp\\Client(); $res = $guzzle-&gt;request('GET', 'https://api.github.com/users/'.$user); return $res-&gt;getBody(); &#125;&#125; Nah disini bisa extend Controller yang berada pada App\\Http\\Controller PercobaanSetelah package dibuat saatnya kita panggil. 12345678910&lt;?phpnamespace App\\Http\\Controllers;use Yodd\\GithubProfile\\GithubProfileController;class HomeController() &#123; public function index() &#123; echo GithubProfileController::user('axlyody'); &#125;&#125; Hasilnya Yup selesai membuat package, sekarang saatnya dipublish ke packagist. Untuk mempublishnya kamu harus memerhatikan composer.json dan folder package harus sesuai. Semisal yodd/githubprofile itu akan dijadikan sebagai instalasi di packagistcomposer require yodd/githubprofile:dev-master. Karena kamu push dimaster, untuk membuat versi kamu harus mempushnya pada branch GitHub. Push packagemu ke GitHub Lakukan registrasi di Packagist Hubungkan GitHub ke Packagist Tambah package yang sudah dipush tadi ke Packagist Bisa dibaca lebih lanjut pada dokumentasi Packagist.","link":"/Membuat-Laravel-Package.html"}],"tags":[{"name":"vuejs","slug":"vuejs","link":"/tags/vuejs/"},{"name":"search","slug":"search","link":"/tags/search/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"laravel","slug":"laravel","link":"/tags/laravel/"},{"name":"php","slug":"php","link":"/tags/php/"}],"categories":[{"name":"ngoding","slug":"ngoding","link":"/category/ngoding/"}]}